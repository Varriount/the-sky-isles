{"_id":"O7BzfcLUujT0jtuI","name":"The Fiery Incantation","type":"script","author":"F0kLzvTSBVFNjohJ","img":"icons/svg/dice-target.svg","scope":"global","command":"const modes = [{\n        name: \"Default\",\n        file: \"\",\n        darkness: 0,\n        hideLights: true, \n    },\n    {\n        name: \"Incantation\",\n        file: \"-incantation-shadows\",\n        darkness: 0.25,\n        hideLights: false,\n    },\n    {\n        name: \"Incantation & Fire from Sethlok\",\n        file: \"-bakeneko-fight\",\n        darkness: 0.5,\n        hideLights: false,\n    },\n    {\n        name: \"Incantation & Fire from Sethlok and the yokai pheonix\",\n        file: \"-fight-golden-phoenix\",\n        darkness: 0.75,\n        hideLights: false,\n    }\n];\n\nconst d = new Dialog({\n    title: \"The Fiery Incantation\",\n    content: \"<p>The Monastery Courtyard map has four versions, which would you like to use?</p><select></select>\",\n    buttons: {},\n    render: html => {\n        const select = html[0].querySelector(\"select\");\n        modes.forEach(mode => {\n            const option = document.createElement(\"option\");\n            option.innerText = mode.name;\n            select.append(option);\n        });\n        select.value = \"\";\n\n        select.addEventListener(\"change\", async () => {\n            const mode = modes.find(mode => mode.name === select.value);\n            const scene = game.scenes.getName(\"The Fiery Incantation\");\n\n            const affectedLights = [\"cglpc6A25sXnT03J\", \"Zk99JqA9FN9NjvhT\", \"TnMKbuw3ccJRNcUK\", \"NVzJ5so3RadCI93Q\"];\n            const lightUpdates = affectedLights.map(id => {\n                return {\n                    _id: id,\n                    hidden: mode.hideLights,\n                }\n            });\n            await scene.updateEmbeddedDocuments(\"AmbientLight\", lightUpdates);\n\n            await scene.update({\n                darkness: mode.darkness,\n                img: \"worlds/the-sky-isles/scenes/backgrounds/the-fiery-incantation\" + mode.file + \".webp\"\n            });\n        });\n    }\n});\nd.render(true);","folder":null,"sort":0,"permission":{"default":0,"F0kLzvTSBVFNjohJ":3},"flags":{}}
{"_id":"g8QxQXLZcgAQ3weX","name":"The Skywalk","type":"script","author":"lKFo7rqxnExr91ki","img":"icons/svg/dice-target.svg","scope":"global","command":"let oldSceneName = 'The Skywalk';\n\n// Find the previous version of the map by name\n// to find its grid size.\nlet oldGrid = game.data.scenes.filter(s => s.name == oldSceneName).map(s => s.grid);\n// Get size of active scene's grid.\nlet newGrid = canvas.scene.data.grid;\n// Amount to scale the active scene by.\nlet scale = newGrid / oldGrid;\n\n// If you need to update more stuff like tokens or tiles,\n// run the line below in a separate macro first.\n// Then hit F12 and check the log to see if tiles look\n// lights (have an x,y) or look like walls (have a c array),\n// and copy-paste-tweak an existing bit from the update\n// function to match.\n//console.log(canvas.scene.data);\n\n// Optional\n// notes (journal pins) could have their iconSize scaled, too.  Should result in an integer.\n\nmain();\nasync function main() {\n  await canvas.scene.update({\n    drawings: canvas.scene.data.drawings.map(drawing => {\n      drawing.x *= scale;\n      drawing.y *= scale;\n      drawing.width *= scale;\n      drawing.height *= scale;\n      return drawing;\n    }),\n    lights: canvas.scene.data.lights.map(light => {\n      light.x *= scale;\n      light.y *= scale;\n      return light;\n    }),\n    notes: canvas.scene.data.notes.map(note => {\n      note.x *= scale;\n      note.y *= scale;\n      return note;\n    }),\n    templates: canvas.scene.data.templates.map(template => {\n      template.x *= scale;\n      template.y *= scale;\n      // Distance is already in game units!\n      //template.distance *= scale;\n      return template;\n    }),\n    walls: canvas.scene.data.walls.map(w => {\n      /*\n      w.c = w.c.map(pos => pos * scale);\n      return w;\n      */\n      let neww = duplicate(w);\n      neww.c = w.c.map(pos => pos * scale);\n      return neww;\n    })\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"lKFo7rqxnExr91ki":3},"flags":{}}
